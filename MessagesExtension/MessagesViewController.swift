//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Taguhi Abgaryan on 2/22/17.
//  Copyright Â© 2017 Taguhi Abgaryan. All rights reserved.
//

import UIKit
import Messages

/*
 While not strictly enforced, here are the file sizes that Apple recommends for sticker packs:
 - Small:  300 x 300 pixel image
 - Medium: 378 x 378 pixel image
 - Large:  618 x 618 pixel image
*/

class MessagesViewController: MSMessagesAppViewController, UIScrollViewDelegate {
    
//    @IBOutlet weak var content: UIScrollView! // the scroll view of stickers of a specific package
//    @IBOutlet weak var packages: UIScrollView! // the scroll view of sticker packages
//    
//    override func viewDidLoad() {
//        super.viewDidLoad()
//        StickerManager.packages = allPackages
//    }
//    
//    override func viewWillAppear(_ animated: Bool) {
//        super.viewWillAppear(animated)
//        initialSetup()
//    }
//    
//    private func initialSetup() {
//        // render sticker buttons in packagesContainer
//        
////        let buttonOne = UIButton(type: .system)
////        buttonOne.frame = CGRect(x: 10, y: 50, width: 50, height: 50)
////        buttonOne.backgroundColor = UIColor.green
////        buttonOne.setTitle("test", for: UIControlState.normal)
////        buttonOne.addTarget(self, action: #selector(stickerPackageTapAction), for: UIControlEvents.touchUpInside)
////        self.scrollView = UIScrollView()
////        self.scrollView.delegate = self
////        self.scrollView.contentSize = CGSize(width: 1000, height: 1000)
////        containerView = UIView()
////        containerView.addSubview(buttonOne)
//    }
//    
//    @objc private func stickerPackageTapAction() {
//        // render stickers in contentContainer
//    }
    
// -----------------------------------------------------------------------------------------------
    
    var scrollView = UIScrollView()
    var containerView = UIView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let buttonOne = UIButton(type: .system)
        buttonOne.frame = CGRect(x: 10, y: 50, width: 50, height: 50)
        buttonOne.backgroundColor = UIColor.green
        buttonOne.setTitle("test", for: UIControlState.normal)
        //            buttonOne.addTarget(self, action: "buttonAction1x1:", for: UIControlEvents.touchUpInside)
        self.scrollView = UIScrollView()
        self.scrollView.delegate = self
        self.scrollView.contentSize = CGSize(width: 1000, height: 1000)
        containerView = UIView()
        containerView.addSubview(buttonOne)
        scrollView.addSubview(containerView)
        view.addSubview(scrollView)
        
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        scrollView.frame = view.bounds
        containerView.frame = CGRect(x: 0, y: 0, width: scrollView.contentSize.width, height: scrollView.contentSize.height)
    }
    
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        print("TA: Memory warning")
    }
    
// -----------------------------------------------------------------------------------------------
    
//    // MARK: - Conversation Handling
//    
//    override func willBecomeActive(with conversation: MSConversation) {
//        // Called when the extension is about to move from the inactive to active state.
//        // This will happen when the extension is about to present UI.
//        
//        // Use this method to configure the extension and restore previously stored state.
//    }
//    
//    override func didResignActive(with conversation: MSConversation) {
//        // Called when the extension is about to move from the active to inactive state.
//        // This will happen when the user dissmises the extension, changes to a different
//        // conversation or quits Messages.
//        
//        // Use this method to release shared resources, save user data, invalidate timers,
//        // and store enough state information to restore your extension to its current state
//        // in case it is terminated later.
//    }
//   
//    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
//        // Called when a message arrives that was generated by another instance of this
//        // extension on a remote device.
//        
//        // Use this method to trigger UI updates in response to the message.
//    }
//    
//    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
//        // Called when the user taps the send button.
//    }
//    
//    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
//        // Called when the user deletes the message without sending it.
//    
//        // Use this to clean up state related to the deleted message.
//    }
//    
//    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
//        // Called before the extension transitions to a new presentation style.
//    
//        // Use this method to prepare for the change in presentation style.
//    }
//    
//    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
//        // Called after the extension transitions to a new presentation style.
//    
//        // Use this method to finalize any behaviors associated with the change in presentation style.
//    }
    
}

